#!/bin/bash
# This file is part of the jetson_stats package (https://github.com/rbonghi/jetson_stats or http://rnext.it).
# Copyright (c) 2019 Raffaello Bonghi.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

TITLE="Jetson software configurator"

status_folders()
{
    
    if [ -d "/etc/jetson_easy" ] ; then
        echo 1
        return
    fi
    if [ -d "/opt/jetson_stats" ] ; then
        echo 1
        return
    fi
    if [ -d "/usr/local/jetson_stats" ] ; then
        echo 0
        return
    fi
    echo 0
}

folders()
{
    echo "Folder function"
}

status_services()
{
    echo 1
}

services()
{
    echo "Service function"
	local JETSON_STATS_FOLDER="/usr/local/jetson_stats"


	if [ -x "$JETSON_STATS_FOLDER/jetson_performance.sh" ] ; then
		echo " * jetson_performance ${green}executable${reset}"
	else
		echo " * jetson_performance ${red}not executable${reset}"
	fi

	local JE_PERFOMANCE_STATUS="$(systemctl is-active jetson_performance.service)"
	if [ $JE_PERFOMANCE_STATUS = "failed" ] ; then
		echo  " * Jetson clock service is ${red}not installed${reset}"
	else
		echo  " * Jetson clock service is ${green}installed${reset}"	
	fi

	if [ -x "$JETSON_STATS_FOLDER/jetson_fan.sh" ] ; then
		echo " * jetson_fan ${green}executable${reset}"
	else
		echo " * jetson_fan ${red}not executable${reset}"
	fi

	local JE_FAN_STATUS="$(systemctl is-active jetson_fan.service)"
	if [ $JE_FAN_STATUS = "failed" ] ; then
		echo  " * Jetson fan service is ${red}not installed${reset}"
	else
		echo  " * Jetson fan service is ${green}installed${reset}"
	fi
}

status_variables()
{
    echo 0
}

variables()
{
    echo "Variables"
	if [ ! -f "/etc/profile.d/jetson_env.sh" ] ; then
		echo " * Jetson environment variables are ${red}not in list${reset}"
	else
		echo " * Jetson environment variables are ${green}in list${reset}"
	fi
}

write_status()
{
    if [ $1 -eq 1 ] ; then
        echo "n"
    else
        echo "Y"
    fi
}

status_healt()
{
    local LIST=("$@")
    # Check if there is a 
    for i in "${LIST[@]}"; do
        # Check if a status function in list return error=1
        if [ $i -eq 1 ] ; then
            return 1
        fi
    done
    return 0
}

healt()
{
    local HEALT_FUNCTIONS=($(status_folders) $(status_variables) $(status_services))
    # Make menu
    local MENU="Choose an option"
    local MENU_LIST=("<-- Back" "Return to the main menu."\
                     "[$(write_status $(status_folders))] folders" "Check folders"\
                     "[$(write_status $(status_variables))] variables" "Check variables status"
                     "[$(write_status $(status_services))] services" "Check services")
    # Evaluate the size
    local MENU_LIST_LEN
    let MENU_LIST_LEN=${#LIST[@]}/2
    # Make jetson_stats menu
    local OK_BUTTON="Fix"
    if status_healt "${HEALT_FUNCTIONS[@]}" ; then
        OK_BUTTON="Ok"
    fi
    local OUTPUT
    OUTPUT=$(whiptail --title "$TITLE" --ok-button "$OK_BUTTON" --cancel-button "return" --menu "$MENU" 15 78 $MENU_LIST_LEN "${MENU_LIST[@]}" 3>&1 1>&2 2>&3)
    # Read exit status
    if [ $? -eq 0 ]; then
        # Run the function with the same name
        if [ "$OUTPUT" = "<-- Back" ] ; then
            main
        else
            # Extract function name
            local FUNCTION=$(echo $OUTPUT | cut -d " " -f2)
            # Run function
            $FUNCTION
        fi
    else
        # Return to main for other options
        main
    fi
}


desktop()
{
    echo "desktop"
}


update()
{
    echo "update"
}


about()
{
    whiptail --msgbox "\
This tool provides a straight-forward way of doing initial
configuration of your NVIDIA jetson. Although it can be run
at any time, some of the options may have difficulties if
you have heavily customised your installation.\
" 20 70 1
    # Return to main menu
    main
}


main()
{
    local MENU_LIST=("healt" "Check the status of jetson-stats"\
                     "desktop" "Enable/Disable boot from desktop"\
                     "update" "Update this tool to the latest version"\
                     "about"  "Information about this configuration tool")
    # Evaluate the size
    local MENU_LIST_LEN
    let MENU_LIST_LEN=${#LIST[@]}/2
    # If exist argument pass directly the name
    if [ ! -z "$1" ] ; then
        if type $1 | grep -i function > /dev/null; then
            $1
            exit 0
        fi
    fi
    # Make jetson_stats menu
    local OUTPUT
    OUTPUT=$(whiptail --title "$TITLE" --ok-button "Select" --cancel-button "Finish" --menu "" 15 78 $MENU_LIST_LEN "${MENU_LIST[@]}" 3>&1 1>&2 2>&3)
    # Read exit status
    if [ $?=0 ]; then
        # Run the function with the same name
        $OUTPUT
    fi
}


main $@
exit 0
# EOF
